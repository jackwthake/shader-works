#!/usr/bin/env python3

import os

RES_DIR = os.path.abspath("../res");
OUTFILE_DIR = os.path.abspath("./files.h")
NUM_FILES = sum([len(files) for _, _, files in os.walk(RES_DIR)])

# Add newlines at the end of each line in the file content
# This is necessary for the C code to properly interpret the file content
# as a string literal with line breaks.
def fmt_file(text):
  lines = text.splitlines()
  lines = [line + '\\n' for line in lines]

  return ''.join(lines)


# Adds a file from RES_DIR to the output file in the format:
# {
#   name = "path/to/file.txt",
#   data = "file content with \\n at the end of each line"
# }
def add_file(file_path, outfile):
  with open(file_path, "r") as f:
    content = f.read()
    outfile.write(f'\t{{\n\t\t"{os.path.relpath(file_path, RES_DIR)}",\n')
    outfile.write(f'\t\t"{fmt_file(content)}",\n')
    outfile.write(f'\t\t{len(content)}\n')
    outfile.write('\t},\n')
    

print("Resource Directory:", RES_DIR)
print("Output File:", OUTFILE_DIR)

# Create the output file and write the header
output = open(OUTFILE_DIR, "w")
output.write("// This file is auto-generated by res_copy.py\n")
output.write("// Do not edit manually.\n\n")
output.write('struct FileEntry {\n'
              '\t\tconst char* name;\n'
              '\t\tconst char* data;\n'
              '\t\tunsigned int size;\n'
              '};\n\n'
              'const FileEntry files[] = {\n'
             )

# Walk through the RES_DIR and add each file to the output
for root, dirs, files in os.walk(RES_DIR):
  for file in files:
    file_path = os.path.join(root, file)
    add_file(file_path, output)


# Close the file entry array and write the number of files
output.write('};\n\n')
output.write(f'const int num_files = {NUM_FILES};\n')
output.write('\n\n// End of auto-generated file\n')

output.close()
print(f"Resource files copied to {OUTFILE_DIR}")