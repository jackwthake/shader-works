#!/usr/bin/env python3

import subprocess
import os
import glob

TOOLS_DIR = os.path.relpath('./tools/')
SRC_DIR = os.path.relpath('./src/')
LIB_DIR = os.path.relpath('./lib/')
BIN_DIR = os.path.relpath('./bin/')
OBJ_DIR = os.path.relpath('./bin/obj/')

PROG_NAME = "software-rasterizer"

CXX = './' + os.path.join(TOOLS_DIR, "arm-none-eabi-gcc/9-2019q4/bin/arm-none-eabi-g++")
CC = './' + os.path.join(TOOLS_DIR, "arm-none-eabi-gcc/9-2019q4/bin/arm-none-eabi-gcc")
LD = './' + os.path.join(TOOLS_DIR, "arm-none-eabi-gcc/9-2019q4/bin/arm-none-eabi-ld")
OBJ_COPY = './' + os.path.join(TOOLS_DIR, "arm-none-eabi-gcc/9-2019q4/bin/arm-none-eabi-objcopy")

CFLAGS = [
    "-mcpu=cortex-m4", "-mthumb", "-c", "-g", "-Os", "-Wall", "-std=gnu11", "-mfloat-abi=hard", "-ffunction-sections", "-fdata-sections", "-nostdlib", "-MMD", '-D__SKETCH_NAME__="""{PROG_NAME}"""'
]


CXXFlags = [
    "-mcpu=cortex-m4", "-mthumb", "-c", "-g", "-Os", "-Wall", "-std=gnu++11", "-ffunction-sections", "-fdata-sections", "-fno-threadsafe-statics", "-nostdlib", "-mfloat-abi=hard", "-fno-rtti", "-fno-exceptions", "-MMD", '-D__SKETCH_NAME__="""{PROG_NAME}"""'
]


ELFFLAGS = [
    "-L" + BIN_DIR, "-Os" "-Wl,--gc-sections", "-save-temps", "-T" + os.path.abspath(os.path.join(LIB_DIR, "variant/linker_scripts/gcc/flash_with_bootloader.ld")), "-Wl,-Map=" + os.path.join(BIN_DIR, PROG_NAME + ".map"), "--specs=nano.specs", "--specs=nosys.specs", "-mcpu=cortex-m4", "-mthumb", "-Wl,--cref", "-Wl,--check-sections", "-Wl,--gc-sections", "-Wl,--unresolved-symbols=report-all", "-Wl,--warn-common", "-Wl,--warn-section-align"
]


Defines = [
    '-DF_CPU=200000000L', '-DARDUINO=10607', '-DARDUINO_PYGAMER_M4', '-DARDUINO_ARCH_SAMD', '-DARDUINO_SAMD_ADAFRUIT', '-D__SAMD51J19A__', '-DCRYSTALLESS', '-DADAFRUIT_PYGAMER_M4_EXPRESS', '-D__SAMD51__', '-D__FPU_PRESENT', '-DARM_MATH_CM4', '-mfloat-abi=hard', '-mfpu=fpv4-sp-d16', '-DUSB_VID=0x239A', '-DUSB_PID=0x803D', '-DUSBCON', '-DUSB_CONFIG_POWER=100', '-DUSB_MANUFACTURER="Adafruit"', '-DUSB_PRODUCT="PyGamer M4 Express"'
]


core_include_flags = [
    "samd-core/libraries/Adafruit_TinyUSB_Arduino/src/", "samd-core/libraries/Adafruit_ZeroDMA/", "CMSIS/CMSIS/Core/Include/", "CMSIS-Atmel/CMSIS-Atmel/CMSIS/Device/ATMEL/", "samd-core/cores/arduino/", "variant/"
]


def execute_command(command, errors):
  """
  Executes a command and captures stderr if an error occurs.

  Args:
      command (list): The command to execute as a list of strings.
      errors (list): A list to append any error messages to.
  """
  try:
    print(f"\tExecuting: {' '.join(command)}")
    # Pass the command list directly. Do not use .append() here.
    result = subprocess.run(
        command, 
        capture_output=True, 
        text=True, 
        check=True
    )
    if result.stdout:
        print(result.stdout)
    if result.stderr:
        print(result.stderr)

  except subprocess.CalledProcessError as e:
    errors.append(e.stderr)
  except FileNotFoundError:
    print(f"Error: Command not found: '{command[0]}'")



def find_files_by_extension(folder_path, extension):
    """
    Recursively finds all files in a given folder and its subdirectories
    with a specific extension.

    Args:
        folder_path (str): The path to the folder to search.
        extension (str): The file extension to match (e.g., '.c', '.cpp').

    Returns:
        list: A list of file paths that match the extension. Returns an empty
              list if the folder is not found.
    """
    matching_files = []
    if not os.path.isdir(folder_path):
        print(f"Error: Folder not found at '{folder_path}'")
        return matching_files
        
    # os.walk() recursively traverses the directory tree
    for root, _, files in os.walk(folder_path):
        for filename in files:
            if filename.endswith(extension):
                matching_files.append(os.path.join(root, filename))
    return matching_files


def compile_code(source_files, iflags, is_cpp, output_filename, warnings):
    """
    Compiles C or C++ source files using gcc or g++.

    Args:
        source_files (list): A list of strings representing the source file paths.
        iflags (list): A list of strings for compiler include paths (e.g., ['-Iinclude/']).
        is_cpp (bool): True for C++ (g++), False for C (gcc).
        output_filename (str): The name of the output executable file.
        warnings (list): A list to append any warning messages to.
    """
    # Validate input: Ensure there are source files to compile.
    if not source_files:
        print("Error: No source files provided.")
        return

    # Determine the compiler command
    compiler = CXX if is_cpp else CC
    flags = CXXFlags if is_cpp else CFLAGS
    # Prepend the library path and '-I' to each include flag
    _iflags = ["-I" + os.path.join(LIB_DIR, include) for include in iflags]
    _iflags.append("-I" + SRC_DIR) # Also include the main src directory
    
    # Construct the full compilation command as a list of arguments.
    command = [compiler] + flags + _iflags + Defines + ["-o", output_filename] + source_files

    # Execute the command
    try:
        result = subprocess.run(command, capture_output=True, text=True, check=True)
        # Added this print statement back to show confirmation of compilation
        print(f"\t\t-> Compiled '{os.path.basename(output_filename)}'")
        if result.stderr: # If there were any warnings, they would be in result.stderr
            unique_warnings = list(set(result.stderr.strip().splitlines()))
            for warning in unique_warnings:
                warnings.append(warning)

    except FileNotFoundError:
        print(f"Error: Compiler '{compiler}' not found. Please ensure it is installed and in your PATH.")
    
    except subprocess.CalledProcessError as e:
        print("\n--- Compilation Failed ---")
        print(f"For file: {os.path.basename(source_files[0])}")
        print(e.stderr)
        exit();
        
    except Exception as e:
        print(f"An unexpected error occurred: {e}")


def build_directory(path, warnings, additional_include=[], exclude_paths=[], is_src=False):
    """
    Compiles C and C++ files in a given directory, excluding specified files and directories.

    Args:
        path (str): The directory path to build, relative to LIB_DIR or SRC_DIR.
        warnings (list): A list of compiler warning flags.
        additional_include (list, optional): A list of additional include directories.
        exclude_paths (list, optional): A list of files or directories to exclude. 
                                        Directories should be specified as relative paths 
                                        (e.g., 'graphics/utils').
        is_src (bool, optional): If True, resolves 'path' relative to SRC_DIR, 
                                 otherwise relative to LIB_DIR.
    """
    _dir = os.path.join(LIB_DIR, path) if not is_src else os.path.join(SRC_DIR, path)
    c_files = find_files_by_extension(_dir, '.c')
    cxx_files = find_files_by_extension(_dir, '.cpp')

    print(f"Building '{path}'")
    iflags = core_include_flags + additional_include

    # --- New Exclusion Logic ---
    # Separate exclusions into files and directories for clear and efficient checking.
    # We normalize all paths to use forward slashes for cross-platform consistency.
    exclude_files = {p.replace('\\', '/') for p in exclude_paths if not p.endswith('/') and '.' in os.path.basename(p)}
    exclude_dirs = {p.replace('\\', '/') for p in exclude_paths if p.endswith('/') or '.' not in os.path.basename(p)}
    
    # Helper function to check if a file's path is within an excluded directory.
    def is_in_excluded_dir(file_path):
        # Get the file's directory, relative to the library or source root.
        relative_dir = os.path.dirname(os.path.relpath(file_path, LIB_DIR if not is_src else SRC_DIR)).replace('\\', '/')
        # Check if the file's directory or any of its parent directories are in the exclude set.
        path_parts = relative_dir.split('/')
        for i in range(len(path_parts)):
            # Reconstruct parent paths (e.g., "a/b/c" -> "a", "a/b", "a/b/c")
            current_path_part = "/".join(path_parts[:i+1])
            if current_path_part in exclude_dirs:
                return True, current_path_part # Return the matching directory
        return False, None

    # --- C++ File Processing ---
    for file in cxx_files:
        # Determine the unique key for this file for exclusion checks.
        exclude_key = os.path.relpath(file, LIB_DIR if not is_src else SRC_DIR).replace('\\', '/')
        
        # Check for directory exclusion first.
        is_excluded, excluded_dir = is_in_excluded_dir(file)
        if is_excluded:
            print(f"\tExcluding [C++] {os.path.basename(file)} (in excluded dir: '{excluded_dir}')")
            continue
        
        # Check for individual file exclusion.
        if exclude_key in exclude_files:
            print(f"\tExcluding [C++]: {exclude_key}")
            continue

        output = os.path.join(OBJ_DIR, os.path.basename(file)[:-4] + '.o')
        if os.path.exists(output) and os.path.getmtime(file) < os.path.getmtime(output):
            continue
        print(f"\tCompiling [C++]: {os.path.basename(file)}")
        compile_code([file], iflags, True, output, warnings)

    # --- C File Processing ---
    for file in c_files:
        # Determine the unique key for this file for exclusion checks.
        exclude_key = os.path.relpath(file, LIB_DIR if not is_src else SRC_DIR).replace('\\', '/')

        # Check for directory exclusion first.
        is_excluded, excluded_dir = is_in_excluded_dir(file)
        if is_excluded:
            print(f"\tExcluding [C] {os.path.basename(file)} (in excluded dir: '{excluded_dir}')")
            continue

        # Check for individual file exclusion.
        if exclude_key in exclude_files:
            print(f"\tExcluding [C]: {exclude_key}")
            continue
            
        output = os.path.join(OBJ_DIR, os.path.basename(file)[:-2] + '.o')
        if os.path.exists(output) and os.path.getmtime(file) < os.path.getmtime(output):
            continue
        print(f"\tCompiling [C]: {os.path.basename(file)}")
        compile_code([file], iflags, False, output, warnings)


def core_library_build():
  warnings = []
  print("------------- Building Core  ---------------")
  build_directory("samd-core/cores/arduino/avr", warnings)
  build_directory("samd-core/cores/arduino/USB", warnings)
  build_directory("samd-core/cores/arduino/", warnings, additional_include=["CMSIS/CMSIS/DSP/Include/"], exclude_paths=["samd-core/cores/arduino/main.cpp"])
  build_directory("samd-core/libraries/Wire", warnings)
  build_directory("samd-core/libraries/SPI", warnings)
  build_directory("samd-core/libraries/Adafruit_ZeroDMA/", warnings)
#   build_directory("BusIO", warnings, additional_include=['BusIO/', 'samd-core/libraries/Wire', 'samd-core/libraries/SPI'])
  build_directory("variant", warnings)


def main_dependency_build():
  print("\n\n-------- Building Core Dependencies --------")
  warnings = []
  additional_include = [
      'BusIO/', 'samd-core/libraries/Wire/', 'samd-core/libraries/SPI/',
      'Adafruit-GFX/', 'SdFat/src/', 'SPIFlash/src/'
  ]

#   build_directory("Adafruit-GFX", warnings, additional_include)
#   build_directory("ST7735", warnings, additional_include)
  build_directory("SdFat", warnings, additional_include, exclude_paths=["SdFat/extras"])
  build_directory("SPIFlash/src", warnings, additional_include + ["SPIFlash/src/spi/"])

  if warnings:
    print("\n----------- Warnings Summary -------------")
    unique_warnings = sorted(list(set(warnings)))
    for warning in unique_warnings:
        print(warning)


def main_project_build():
    print("\n\n---------- Building Main Project ---------")
    warnings = []
    additional_include = [
      'BusIO/', 'samd-core/libraries/Wire/', 'samd-core/libraries/SPI/',
      'samd-core/libraries/Adafruit_zeroDMA/', 'CMSIS-Atmel/CMSIS-Atmel/CMSIS/Device/ATMEL/samd51/include/',
      'SPIFlash/src/', 'SdFat/src/', 'variant/',
    ]

    build_directory(".", warnings, additional_include, is_src=True)
    if warnings:
      print("\n----------- Warnings Summary -------------")
      unique_warnings = sorted(list(set(warnings)))
      for warning in unique_warnings:
          print(warning)


def link_project():
    warnings = []
    print("\n\n----------- Linking Everything -----------")

    # Get all object files and the core archive to be linked
    object_files = glob.glob(os.path.join(OBJ_DIR, '*.o'))
    # core_archive = os.path.join(BIN_DIR, "core.a")

    if not object_files:
        print("Linker Error: No object files found in " + OBJ_DIR)
        return

    # Define output files and linker script path
    output_map = os.path.join(BIN_DIR, PROG_NAME + ".map")
    output_elf = os.path.join(BIN_DIR, PROG_NAME + ".elf")
    output_hex = os.path.join(BIN_DIR, PROG_NAME + ".hex")
    output_bin = os.path.join(BIN_DIR, PROG_NAME + ".bin")
    linker_script = os.path.join(LIB_DIR, "variant/linker_scripts/gcc/flash_with_bootloader.ld")

    # Construct the linker command with properly separated arguments
    cmd = [
        CXX,
    ] + ELFFLAGS + [
        "-mfloat-abi=hard",
        "-o", output_elf,
        "-Wl,--start-group", 
        "-L" + os.path.join(LIB_DIR, "CMSIS/CMSIS/Lib/GCC/"), "-larm_cortexM0l_math", 
        "-L" + os.path.join(LIB_DIR, "variant/"), "-lm", "-Wl,--end-group"
    ] + object_files

    execute_command(cmd, warnings)

    # Obj copy
    cmd = [
        OBJ_COPY,
        "-O", "binary", output_elf,
        output_bin
    ]

    execute_command(cmd, warnings)

    # reformat binary
    cmd = [
        OBJ_COPY,
        "-O", "ihex", 
        '-R', ".eeprom", 
        output_elf, output_hex
    ]

    print(cmd)

    execute_command(cmd, warnings)

    # Print any warnings or errors that were captured during linking
    if warnings:
        print("\n----------- Linker Issues -------------")
        for error in warnings:
            print(error)


if __name__ == "__main__":
    # Create required directories if they don't exist
    if not os.path.exists(BIN_DIR):
        os.makedirs(BIN_DIR)
    if not os.path.exists(OBJ_DIR):
        os.makedirs(OBJ_DIR)
    
    core_library_build()
    main_dependency_build()
    main_project_build()
    link_project()
