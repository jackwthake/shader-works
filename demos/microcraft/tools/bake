#!/usr/bin/env python3

import os
from PIL import Image

RES_DIR = os.path.abspath("./res");
OUTFILE_DIR = os.path.abspath("./src/resources.inl")
EXCLUDE_EXT = [".pyxel"]
NUM_FILES = sum(
  1
  for root, _, files in os.walk(RES_DIR)
  for file in files
  if not any(file.endswith(ext) for ext in EXCLUDE_EXT)
)

# Add newlines at the end of each line in the file content
# This is necessary for the C code to properly interpret the file content
# as a string literal with line breaks.
def fmt_file(text):
  lines = text.splitlines()
  lines = [line + '\\n' for line in lines]

  return f'"{lines}"'


# Adds a file from RES_DIR to the output file in the format:
# {
#   name = "path/to/file.txt",
#   data = "file content with \\n at the end of each line"
#   size = 1234
# }
def generate_file_obj(outfile, file_path, content, length):
  outfile.write(f'\t{{\n\t\t"{os.path.relpath(file_path, RES_DIR)}",\n')
  outfile.write(f'\t\t{content},\n')
  outfile.write(f'\t\t{length}\n')
  outfile.write('\t},\n')


# Populates each generated FileEntry struct with the raw bytes from the source file
def add_file(file_path, outfile):
  if any(file_path.endswith(ext) for ext in EXCLUDE_EXT):
    return

  print (file_path)
  with Image.open(file_path) as img:
    # Convert to RGBA if not already
    img = img.convert('RGBA')

    # Convert to RGBA8888 format (32-bit)
    pixels_rgba = []
    for y in range(img.height):
      for x in range(img.width):
        r, g, b, a = img.getpixel((x, y))
        # Pack RGBA into 32-bit integer: RGBA8888 format
        pixel_rgba = (r << 24) | (g << 16) | (b << 8) | a
        pixels_rgba.append(pixel_rgba)

    # Format as uint32_t array
    pixels_str = ', '.join([f'0x{p:08X}' for p in pixels_rgba])
    content = '(uint32_t[]) { ' + pixels_str + ' }'
    num_pixels = len(pixels_rgba)

    generate_file_obj(outfile, file_path, content, num_pixels * 4)  # 4 bytes per uint32_t
    

print("Resource Directory:", RES_DIR)
print("Output File:", OUTFILE_DIR)

# Create the output file and write the header
output = open(OUTFILE_DIR, "w")
output.write("// This file is auto-generated by tools/bake\n")
output.write("// Do not edit manually.\n\n")
output.write('#pragma once\n\n')
output.write('#include <stdint.h>\n\n')
output.write('struct FileEntry {\n'
              '\t\tconst char* name;\n'
              '\t\tuint32_t *data;\n'
              '\t\tunsigned int size;\n'
              '};\n\n'
              'FileEntry files[] = {\n'
             )

# Walk through the RES_DIR and add each file to the output
for root, dirs, files in os.walk(RES_DIR):
  for file in files:
    file_path = os.path.join(root, file)
    add_file(file_path, output)


# Close the file entry array and write the number of files
output.write('};\n\n')
output.write(f'const int num_files = {NUM_FILES};\n')
output.write('\n\n// End of auto-generated file\n')

output.close()
print(f"Resource files copied to {OUTFILE_DIR}")